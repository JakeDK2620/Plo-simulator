import streamlit as st
import random
import json
from itertools import combinations
from treys import Card, Evaluator

# Kortværdi mapping
ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']
suits = ['s', 'h', 'd', 'c']
all_cards = [r + s for r in ranks for s in suits]

# Funktion til konvertering til treys
def to_treys(card_str):
    return Card.new(card_str)

def parse_cards(card_list):
    return [to_treys(card) for card in card_list]

# Gem og hent hænder
def save_hand(hero_hand, opponent_hands, board):
    with open("/mnt/data/saved_hand.json", "w") as f:
        json.dump({
            "hero": hero_hand,
            "opponents": opponent_hands,
            "board": board
        }, f)

def load_hand():
    try:
        with open("/mnt/data/saved_hand.json", "r") as f:
            data = json.load(f)
            return data["hero"], data["opponents"], data["board"]
    except:
        return [], [], []

# Simuleringsfunktion
def simulate(hero_hand, opponent_hands, board, street, n):
    evaluator = Evaluator()
    hero_wins = 0
    ties = 0
    total = 0

    for _ in range(n):
        deck = [c for c in all_cards if c not in hero_hand]
        fixed_opponents = []
        for hand in opponent_hands:
            if "random" not in hand:
                fixed_opponents.append(hand)
                deck = [c for c in deck if c not in hand]
        deck = [c for c in deck if c not in board]
        random.shuffle(deck)

        # Board-udfyldelse
        street_map = {"preflop": 5, "flop": 2, "turn": 1, "river": 0}
        cards_needed = street_map[street]
        sim_board = board + deck[:cards_needed]
        deck = deck[cards_needed:]

        # Generér tilfældige modstandere
        sim_opponents = []
        for hand in opponent_hands:
            if "random" in hand:
                cards = []
                while len(cards) < 4:
                    card = deck.pop()
                    if card not in hero_hand + sim_board + cards:
                        cards.append(card)
                sim_opponents.append(cards)
            else:
                sim_opponents.append(hand)

        # Hero score
        hero_combos = combinations(parse_cards(hero_hand), 2)
        board_combos = combinations(parse_cards(sim_board), 3)
        hero_best = min([evaluator.evaluate(h, b) for h in hero_combos for b in board_combos])

        opp_scores = []
        for opp in sim_opponents:
            opp_combos = combinations(parse_cards(opp), 2)
            opp_best = min([evaluator.evaluate(h, b) for h in opp_combos for b in board_combos])
            opp_scores.append(opp_best)

        if hero_best < min(opp_scores):
            hero_wins += 1
        elif hero_best == min(opp_scores):
            ties += 1
        total += 1

    return hero_wins, ties, total

# Streamlit App
st.title("Pot Limit Omaha Simulator (4 spillere)")

# Hent tidligere hænder
hero_hand, opponent_hands, board = load_hand()

# Hero hånd
st.subheader("Vælg Hero's hånd")
hero_cols = st.columns(4)
hero_hand = [hero_cols[i].selectbox(f"Hero kort {i+1}", [""] + all_cards, index=all_cards.index(hero_hand[i]) + 1 if i < len(hero_hand) else 0, key=f"hero_{i}") for i in range(4)]

# Vælg antal modstandere
num_opponents = st.slider("Antal modstandere", 1, 3, 3)

# Modstanderes hænder
st.subheader("Vælg modstanderes hænder")
opponent_hands = []
for i in range(num_opponents):
    cols = st.columns(4)
    hand = []
    for j in range(4):
        card = cols[j].selectbox(f"Spiller {i+1} kort {j+1}", [""] + all_cards + ["random"], key=f"opp_{i}_{j}")
        hand.append(card if card != "" else "random")
    opponent_hands.append(hand)

# Board kort
st.subheader("Board kort")
flop_cols = st.columns(3)
flop = [flop_cols[i].selectbox(f"Flop {i+1}", [""] + all_cards, key=f"flop_{i}") for i in range(3)]
turn = st.selectbox("Turn", [""] + all_cards, key="turn")
river = st.selectbox("River", [""] + all_cards, key="river")
board = [c for c in flop + [turn, river] if c != ""]

# Simulering
st.subheader("Simulering")
street = st.selectbox("Simuler ved street", ["preflop", "flop", "turn", "river"])
num_simulations = st.number_input("Antal simuleringer", 1, 20000, 1000)

if st.button("Kør simulering"):
    wins, ties, total = simulate(hero_hand, opponent_hands, board, street, num_simulations)
    st.success(f"Hero vinder: {wins / total * 100:.2f}%")
    st.info(f"Split pot: {ties / total * 100:.2f}%")
    st.warning(f"Hero taber: {(total - wins - ties) / total * 100:.2f}%")
    save_hand(hero_hand, opponent_hands, board)